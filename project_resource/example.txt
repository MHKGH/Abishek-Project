provider "aws" {
  region = "us-east-1"  # Change as needed
}

# ðŸš€ Security Group for ALB
resource "aws_security_group" "alb_sg" {
  name        = "alb_security_group"
  description = "Allow HTTP and HTTPS"

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# ðŸš€ Security Group for EC2 Instance
resource "aws_security_group" "ec2_sg" {
  name        = "ec2_security_group"
  description = "Allow traffic from ALB"

  ingress {
    from_port       = 80
    to_port         = 80
    protocol        = "tcp"
    security_groups = [aws_security_group.alb_sg.id]  # Only allow traffic from ALB
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# ðŸš€ Create an EC2 Instance Running NGINX
resource "aws_instance" "nginx_server" {
  ami                    = "ami-0c55b159cbfafe1f0"  # Amazon Linux 2 (Change for your region)
  instance_type          = "t2.micro"
  security_groups        = [aws_security_group.ec2_sg.name]
  key_name               = "my-key-pair"  # Change to your key
  user_data              = <<-EOF
              #!/bin/bash
              yum update -y
              yum install -y nginx
              systemctl start nginx
              systemctl enable nginx
          EOF

  tags = {
    Name = "nginx-terraform"
  }
}

# ðŸš€ AWS ACM - SSL Certificate for HTTPS
resource "aws_acm_certificate" "nginx_cert" {
  domain_name       = "yourdomain.com"  # Change to your domain
  validation_method = "DNS"

  lifecycle {
    create_before_destroy = true
  }
}

# ðŸš€ Application Load Balancer (ALB)
resource "aws_lb" "nginx_alb" {
  name               = "nginx-alb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.alb_sg.id]
  subnets           = ["subnet-xxxxxxxx", "subnet-yyyyyyyy"] # Replace with your VPC subnets

  enable_deletion_protection = false
}

# ðŸš€ ALB Listener for HTTPS
resource "aws_lb_listener" "https_listener" {
  load_balancer_arn = aws_lb.nginx_alb.arn
  port              = 443
  protocol          = "HTTPS"
  ssl_policy        = "ELBSecurityPolicy-2016-08"
  certificate_arn   = aws_acm_certificate.nginx_cert.arn

  default_action {
    type = "forward"
    target_group_arn = aws_lb_target_group.nginx_tg.arn
  }
}

# ðŸš€ Target Group for ALB to Route Traffic to EC2
resource "aws_lb_target_group" "nginx_tg" {
  name     = "nginx-tg"
  port     = 80
  protocol = "HTTP"
  vpc_id   = "vpc-xxxxxxxx"  # Replace with your VPC ID

  health_check {
    path                = "/"
    interval            = 30
    timeout             = 5
    healthy_threshold   = 2
    unhealthy_threshold = 2
  }
}

# ðŸš€ Register EC2 Instance with ALB Target Group
resource "aws_lb_target_group_attachment" "nginx_attachment" {
  target_group_arn = aws_lb_target_group.nginx_tg.arn
  target_id        = aws_instance.nginx_server.id
  port             = 80
}

output "alb_dns_name" {
  value = aws_lb.nginx_alb.dns_name
}